#!/usr/bin/env node

import { networkInterfaces } from 'os';
import { writeFileSync, readFileSync, existsSync } from 'fs';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';

const __dirname = dirname(fileURLToPath(import.meta.url));

/**
 * Get the local network IP address
 * Prioritizes common network interface names and IPv4 addresses
 */
function getNetworkIP() {
  const interfaces = networkInterfaces();
  const priorities = ['en0', 'eth0', 'wlan0', 'Wi-Fi', 'Ethernet'];
  
  // Try priority interfaces first
  for (const name of priorities) {
    if (interfaces[name]) {
      const ipv4 = interfaces[name].find(
        (iface) => iface.family === 'IPv4' && !iface.internal
      );
      if (ipv4) {
        return ipv4.address;
      }
    }
  }
  
  // Fallback to any available IPv4 address
  for (const name in interfaces) {
    const iface = interfaces[name];
    const ipv4 = iface.find(
      (i) => i.family === 'IPv4' && !i.internal
    );
    if (ipv4) {
      return ipv4.address;
    }
  }
  
  return null;
}

/**
 * Update or create .env file with the network IP
 */
function updateEnvFile(ip) {
  const envPath = join(__dirname, '..', '.env');
  let envContent = '';
  
  if (existsSync(envPath)) {
    envContent = readFileSync(envPath, 'utf-8');
  }
  
  // Check if VITE_API_HOST already exists
  const viteApiHostRegex = /^VITE_API_HOST=.*$/m;
  
  if (viteApiHostRegex.test(envContent)) {
    // Update existing value
    envContent = envContent.replace(viteApiHostRegex, `VITE_API_HOST=${ip}`);
  } else {
    // Add new value
    if (envContent && !envContent.endsWith('\n')) {
      envContent += '\n';
    }
    envContent += `VITE_API_HOST=${ip}\n`;
  }
  
  writeFileSync(envPath, envContent);
  console.log(`‚úÖ Updated .env with VITE_API_HOST=${ip}`);
}

/**
 * Update the API config file in the UI package
 */
function updateApiConfig(ip) {
  const configPath = join(__dirname, '..', '..', '..', 'packages', 'ui', 'src', 'lib', 'api-config.ts');
  const configContent = `// This file is auto-generated by the mobile dev scripts
// DO NOT EDIT MANUALLY - it will be overwritten

export const API_CONFIG = {
  baseUrl: 'http://${ip}:3000'
};`;
  
  writeFileSync(configPath, configContent);
  console.log(`‚úÖ Updated api-config.ts with network IP`);
}

// Main execution
const ip = getNetworkIP();

if (ip) {
  console.log(`üåê Detected network IP: ${ip}`);
  updateEnvFile(ip);
  updateApiConfig(ip);
  
  // Set it as an environment variable for the current process
  process.env.VITE_API_HOST = ip;
  
  console.log(`\nüì± You can now run mobile development commands:`);
  console.log(`   pnpm tauri ios dev`);
  console.log(`   pnpm tauri android dev`);
  console.log(`\nüåê Make sure the web backend is running with:`);
  console.log(`   cd ../web && pnpm dev:network`);
} else {
  console.error('‚ùå Could not detect network IP address');
  console.error('Please set VITE_API_HOST manually in .env file');
  process.exit(1);
}